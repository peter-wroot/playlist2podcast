# Import required modules
import os, subprocess, json, argparse

# command-line arguments
argument_parser = argparse.ArgumentParser()
argument_parser.add_argument("-p","--playlist")
argument_parser.add_argument("-t","--title")
argument_parser.add_argument("-a","--artist")
argument_parser.add_argument("-y","--youtube-dl")
argument_parser.add_argument("-f","--ffmpeg")
arguments=argument_parser.parse_args()

# metadata, pulled from command-line arguments.
podcast_title = arguments.title
podcast_author = arguments.artist

# Runs youtube-dl to retrieve the contents of the playlist without actually downloading it.
playlist_contents = subprocess.getoutput(["youtube-dl.exe", "-j", "--flat-playlist", arguments.playlist])

# Turns the multi-line string returned from the previous command into a list
playlist_contents_list = playlist_contents.splitlines()

# Runs through the list and downloads/converts each video
for index, video in enumerate(playlist_contents_list):

    # Parses the JSON generated by youtube-dl and extracts information about the video -  title, youtube ID, and track number (gleaned from index in playlist)
    video_info_json = json.loads(video) 
    video_title = video_info_json["title"]
    video_id = video_info_json["id"]
    track_number = str(int(index) + 1)
    
    # Prints video details to the console.
    print("Title: " + video_title)
    print("Index: " + track_number)
    print("ID: " + video_id)

    # Removes illegal characters from the video title so that we can use it as a file name. Also adds leading zeroes, track id, and file extension.
    for char in ['NUL','\',''//',':','*','<','>','|']:
        video_title = video_title.replace(char, "-")

    final_file_name = video_title.replace('"',"")
    final_file_name = (track_number).zfill(2) + " " + final_file_name + ".mp3"
    print("FINAL FILE NAME: " + final_file_name)

    # Sets up some temp files names so we can play with the track metadata
    temp_file_name = video_id + ".mp3"

    # Runs youtube-dl to download the video, extract the audio, and save it as an MP3 with the file name matching the youtube ID
    subprocess.run(["youtube-dl.exe", "--extract-audio", "--audio-quality" ,"0", "--audio-format", "mp3", "--embed-thumbnail", "--output","%(id)s.%(ext)s", video_id])

    # Sets up variables with the correct formatting so we can pass them to ffmpeg and embed the metadata
    meta_tracknumber = "track=" + track_number
    meta_album = "album=" + podcast_title
    meta_artist = "artist=" + podcast_author
    meta_track = "title=" + video_title

    # Runs ffmpeg and embeds the
    subprocess.run(["ffmpeg.exe", "-i", temp_file_name, "-metadata", meta_tracknumber, "-metadata",  meta_track, "-metadata", meta_album, "-metadata", meta_artist, final_file_name])

    # Deletes the temp file (the one without the metadata)
    os.remove(temp_file_name)

